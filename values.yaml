# @ignored
development_mode_enabled: false

# -- The Route53 subdomain for the services on your cluster. It will be used as the suffix url for argocd, grafana, vault, and any other services that come out of the box in the glueops platform. Note: you need to create this before using this repo as this repo does not provision DNS Zones for you.
# This is the domain you created through: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
captain_domain: <cluster_env>.<tenant-name-goes-here>.glueopshosted.rocks

glueops_alerts:
  # -- Part of `opsgenie_prometheus_api_keys` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  opsgenie_apikey: nil

# Configuration for backups taken by the GlueOps Platform
glueops_backups:
  # Credentials and configuration for backing up vault, values are generated by terraform-module-cloud-multy-prerequisites and are specific to this backup process, due to narrowly scoped permissions
  vault:
    # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_region: us-west-2
    # -- Part of `vault_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # -- Part of `vault_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # @ignored
    cron_expression: "0 */6 * * *"
    company_key: <tenant-name-goes-here>

gitHub:
  # -- create a Personal Access Token in github that has repo scope access. It would be best to use a service account for this otherwise all the comments on PR will be left in your name
  api_token: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # @ignored
  credentialTemplateUrl: "Z2l0QGdpdGh1Yi5jb20=" #git@github.com
  # -- The format is: <github-org-name>:<github-team-name> (The team should include the developers)
  customer_github_org_and_team: "glueops-rocks:developers"
  # -- This is the repo that will be used to store all the tenant's cluster applications. The developers will have access to this repo and will be able to create PRs to this repo. The repo should be private. 
  tenant_application_stack_repo: "git@github.com:<your-org-name>/<your-repo-name>.git"
  # -- Create a deploy key to access the application stack repository it and format using `cat <key-file> | base64 | tr -d '\n'`. ref: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys
  tenant_b64enc_ssh_private_key: XXXXXXXXXXXXXXXXXXXXXXXXXX

# Used to manage glueopshosted DNS entries
externalDns:
  # -- Part of `externaldns_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `externaldns_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2

# Used to manage SSL certificates. Leverages DNS verification for glueopshosted domains.
certManager:
  # -- Get your EAB credentials from: https://zerossl.com/documentation/acme#:~:text=To%20generate%20EAB%20credentials%20click,a%20new%20set%20of%20credentials Note: these appear only once so be sure to save them!
  zerossl_eab_hmac_key: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Get your EAB credentials from: https://zerossl.com/documentation/acme#:~:text=To%20generate%20EAB%20credentials%20click,a%20new%20set%20of%20credentials Note: these appear only once so be sure to save them!
  zerossl_eab_kid: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `certmanager_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `certmanager_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2

grafana:
  # -- To create a clientID and clientSecret please reference: https://github.com/GlueOps/github-oauth-apps
  github_client_id: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- To create a clientID and clientSecret please reference: https://github.com/GlueOps/github-oauth-apps
  github_client_secret: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # @ignored
  github_admin_org_name: GlueOps
  # @ignored
  github_admin_team_name: grafana_super_admins
  github_other_org_names: glueops-rocks


loki:
  # -- Format: glueops-tenant-<tenant-name-goes-here>-<cluster_env>-loki-primary
  bucket: glueops-tenant-<tenant-name-goes-here>-<cluster_env>-loki-primary
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2
  # -- Part of `loki_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `loki_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX

argo-cd:
  # many of these ignored values can be found in the argo-cd helm chart docs: https://artifacthub.io/packages/helm/argo/argo-cd
  # @ignored
  redis-ha:
    enabled: true
  # @ignored
  controller:
    replicas: 1
  # @ignored
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 2
  # @ignored
  applicationSet:
    replicaCount: 2
  server:
    # @ignored
    autoscaling:
      enabled: true
      minReplicas: 2
    config:
      # @ignored
      exec.enabled: "true"
      # This helps argocd know what resources it should be manging. This way if argocd manages an operator and that operator creates a pvc, it won't try and manage the pvc.
      # https://argo-cd.readthedocs.io/en/stable/user-guide/resource_tracking/#choosing-a-tracking-method
      # @ignored
      application.resourceTrackingMethod: "annotation+label"
      # https://argo-cd.readthedocs.io/en/stable/operator-manual/health/#argocd-app
      # https://github.com/argoproj/argo-cd/issues/3781
      # enables health check assessment for argocd applications as we are using sync-waves
      # @ignored
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
      # This is a bit of a hack but allows the external-secret to never error out and always appear healthy to argocd. We probably want to remove this.
      # @ignored
      resource.customizations.health.external-secrets.io_ExternalSecret: |
        hs = {}
        hs.status = "Healthy"
        return hs
      url: "https://argocd.<cluster_env>.<tenant-name-goes-here>.glueopshosted.rocks"
      # -- To create a clientID and clientSecret please reference: https://github.com/GlueOps/github-oauth-apps
      # This dex.config is to create a GitHub connector for SSO to ArgoCD.
      # @default -- `''` (See [values.yaml])
      dex.config: |
        connectors:
          - type: github
            id: github
            name: GitHub
            config:
              clientID: XXXXXXXXXXXXXXXXXXXXXXXXXX
              clientSecret: XXXXXXXXXXXXXXXXXXXXXXXXXX
              orgs:
              - name: GlueOps
              - name: glueops-rocks
              loadAllGroups: true
    rbacConfig:
      # -- A good reference for this is: https://argo-cd.readthedocs.io/en/stable/operator-manual/rbac/
      # This default policy is for GlueOps orgs/teams only. Please change it to reflect your own orgs/teams.
      # `development` is the project that all developers are expected to deploy under
      # @default -- `''` (See [values.yaml])
      policy.csv: |
        g, GlueOps:argocd_super_admins, role:admin
        g, glueops-rocks:developers, role:developers
        p, role:developers, clusters, get, *, allow
        p, role:developers, *, get, development, allow
        p, role:developers, repositories, *, development/*, allow
        p, role:developers, applications, *, development/*, allow
        p, role:developers, exec, *, development/*, allow
    # @ignored
    extraArgs:
      - --insecure
    # @ignored
    service:
      type: ClusterIP
    ingress:
      hosts: ["argocd.<cluster_env>.<tenant-name-goes-here>.glueopshosted.rocks"]
      # @ignored
      enabled: true
      # @ignored
      annotations:
        # this is the internal-nginx ingress class name. Check the application-internal-nginx.yaml under the templates directory for more details.
        kubernetes.io/ingress.class: "internal-ingress-nginx"
