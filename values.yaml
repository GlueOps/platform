
development_mode_enabled: false

# -- The Route53 subdomain for the services on your cluster. It will be used as the suffix url for argocd, grafana, vault, and any other services that come out of the box in the glueops platform. Note: you need to create this before using this repo as this repo does not provision DNS Zones for you.
captain_domain: <cluster_env>.<tenant-name-goes-here>.glueopshosted.rocks

glueops_alerts:
  # -- Part of `opsgenie_prometheus_api_keys` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  opsgenie_apikey: nil

# -- Configuration for backups taken by the GlueOps Platform
glueops_backups:
  # --  Credentials and configuration for backing up vault, values are generated by terraform-module-cloud-multy-prerequisites and are specific to this backup process, due to narrowly scoped permissions
  vault:
    # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_region: us-west-2
    # -- Part of `vault_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
    # -- Part of `vault_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
    aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
    cron_expression: "0 */6 * * *"
    company_key: <tenant-name-goes-here>

gitHub:
  # -- create a Personal Access Token in github that has repo scope access. It would be best to use a service account for this otherwise all the comments on PR will be left in your name
  api_token: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Default is `git@github.com`. We recommend leaving this as is.
  credentialTemplateUrl: "Z2l0QGdpdGh1Yi5jb20=" #git@github.com
  # -- The format is: <github-org-name>:<github-team-name> (The team should include the developers)
  customer_github_org_and_team: "glueops-rocks:developers"
  # -- This is the repo that will be used to store all the tenant's cluster applications. The developers will have access to this repo and will be able to create PRs to this repo. The repo should be private. 
  tenant_application_stack_repo: "git@github.com:<your-org-name>/<your-repo-name>.git"
  # -- Create a deploy key to access the application stack repository it and format using `cat <key-file> | base64 | tr -d '\n'`. ref: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys
  tenant_b64enc_ssh_private_key: XXXXXXXXXXXXXXXXXXXXXXXXXX

# -- Values are specific to externalDNS and generated by terraform-module-cloud-multy-prerequisites
externalDns:
  # -- Part of `externaldns_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `externaldns_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2

certManager:
  # -- can be obtained for free with an account under zerossl.com. To retrieve these values, log in to the relevant zerossl account for your zone and navigate to the developer page. Note: For development, use a personal ZeroSSL account, and not a shared account - this avoids unintended consequences. Each customer will has a unique ZeroSSL account as well.
  zerossl_eab_hmac_key: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- can be obtained for free with an account under zerossl.com. To retrieve these values, log in to the relevant zerossl account for your zone and navigate to the developer page. Note: For development, use a personal ZeroSSL account, and not a shared account - this avoids unintended consequences. Each customer will has a unique ZeroSSL account as well.
  zerossl_eab_kid: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `certmanager_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `certmanager_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2

vault:
  config:
    glues_env: nil

grafana:
  github_client_id: XXXXXXXXXXXXXXXXXXXXXXXXXX
  github_client_secret: XXXXXXXXXXXXXXXXXXXXXXXXXX
  github_admin_org_name: GlueOps
  github_admin_team_name: grafana_super_admins
  github_other_org_names: glueops-rocks

promtail:
  client_url: http://loki-write.glueops-core-loki.svc.cluster.local:3100/loki/api/v1/push

loki:
  # -- Format: glueops-tenant-<tenant-name-goes-here>-<cluster_env>-loki-primary
  bucket: glueops-tenant-<tenant-name-goes-here>-<cluster_env>-loki-primary
  # -- Should be the same `primary_region` you used in: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_region: us-west-2
  # -- Part of `loki_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_accessKey: XXXXXXXXXXXXXXXXXXXXXXXXXX
  # -- Part of `loki_s3_iam_credentials` output from terraform-module-cloud-multy-prerequisites: https://github.com/GlueOps/terraform-module-cloud-multy-prerequisites
  aws_secretKey: XXXXXXXXXXXXXXXXXXXXXXXXXX

argo-cd:
  redis-ha:
    enabled: true
  controller:
    replicas: 1
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 2
  applicationSet:
    replicaCount: 2
  server:
    autoscaling:
      enabled: true
      minReplicas: 2
    config:
      exec.enabled: "true"
      application.resourceTrackingMethod: "annotation+label"
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
      resource.customizations.health.external-secrets.io_ExternalSecret: |
        hs = {}
        hs.status = "Healthy"
        return hs
      url: "https://argocd.<cluster_env>.<tenant-name-goes-here>.glueopshosted.rocks"
      dex.config: |
        connectors:
          - type: github
            id: github
            name: GitHub
            config:
              clientID: XXXXXXXXXXXXXXXXXXXXXXXXXX
              clientSecret: XXXXXXXXXXXXXXXXXXXXXXXXXX
              orgs:
              - name: GlueOps
              - name: glueops-rocks
              loadAllGroups: true
    rbacConfig:
      policy.csv: |
        g, GlueOps:argocd_super_admins, role:admin
        g, glueops-rocks:developers, role:developers
        p, role:developers, clusters, get, *, allow
        p, role:developers, *, get, development, allow
        p, role:developers, repositories, *, development/*, allow
        p, role:developers, applications, *, development/*, allow
        p, role:developers, exec, *, development/*, allow
    extraArgs:
      - --insecure
    service:
      type: ClusterIP
    ingress:
      hosts: ["argocd.<cluster_env>.<tenant-name-goes-here>.glueopshosted.rocks"]
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "internal-ingress-nginx"
