# Default values for glueops-argocd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

development_mode_enabled: false
captain_domain: nil

glueops_backups:
  vault:
    aws_region: nil
    aws_accessKey: nil
    aws_secretKey: nil
    cron_expression: "0 */6 * * *"
    company_key: nil

gitHub:
  api_token: nil
  sshKey: "base64-ssh-key"
  credentialTemplateUrl: "Z2l0QGdpdGh1Yi5jb20=" #git@github.com
  customer_github_org_and_team: "org:team"
  tenant_application_stack_repo: nil # "git@github.com:GlueOps/test-customer-stack.git"
  # Save pem to a file and create this string using "cat <key-file> | base64 | tr -d '\n'"
  tenant_b64enc_ssh_private_key: nil

externalDns:
  aws_accessKey: nil
  aws_secretKey: nil
  aws_region: nil

certManager:
  zerossl_eab_hmac_key: nil
  zerossl_eab_kid: nil
  aws_region: nil
  aws_accessKey: nil
  aws_secretKey: nil

vault:
  config:
    glues_env: nil

grafana:
  github_client_id: nil
  github_client_secret: nil
  github_org_names: nil
  loki_data_source_domain: 'http://loki.glueops-core-loki.svc.cluster.local:3100'

promtail:
  client_url: http://loki.glueops-core-loki.svc.cluster.local:3100/loki/api/v1/push

argo-cd:
  glueops:
    enabled: false
    github_client_id: nil
    github_client_secret: nil
    destination_cluster_for_core_apps: "in-cluster"
    ingress_controller_service_type: "LoadBalancer"
    ingress_controller_host_port_enabled: false

  redis-ha:
    enabled: true
  controller:
    replicas: 1
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 2
  applicationSet:
    replicaCount: 2
  server:
    autoscaling:
      enabled: true
      minReplicas: 2
    config:
      exec.enabled: "true"
      application.resourceTrackingMethod: "annotation+label"
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
      resource.customizations.health.external-secrets.io_ExternalSecret: |
        hs = {}
        hs.status = "Healthy"
        return hs
    rbacConfig: nil
    extraArgs:
      - --insecure
    service:
      type: ClusterIP
    ingress:
      enabled: true
      hosts: nil
      annotations:
        kubernetes.io/ingress.class: "internal-ingress-nginx"
